package com.cmbc.unps.sdk.security;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSON;
import com.cmbc.unps.sdk.exception.ErrorCode;
import com.cmbc.unps.sdk.exception.PlatformException;
import com.cmbc.unps.sdk.security.base.SM2Utils;
import com.cmbc.unps.sdk.util.Constants;
import com.cmbc.unps.sdk.util.UnpsUtils;

import cmbc.cfca.sm2rsa.common.PKIException;
import cmbc.cfca.util.Base64;

/**
 * SM2证书，加密加签方式
 */
public class SecuRuleSM203 implements ISecuRule {

	private static Logger logger = Logger.getLogger(SecuRuleSM203.class);

	/**
	 * 解密
	 * 
	 * @throws PlatformException
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> decodeMsg(String merchantNum, Map<String, String> responseMap) throws PlatformException {
		if (responseMap == null) {
			return new HashMap<String, Object>();
		} else {
			String businessContext = (String) responseMap.get(Constants.businessContext);
			String businessContext_dec = decodeMsgToString(merchantNum, businessContext);
			if (businessContext_dec != null && businessContext_dec.length() > 0) {
				return JSON.parseObject(businessContext_dec, Map.class);
			} else {
				return new HashMap<String, Object>();
			}
		}
	}

	@SuppressWarnings("unchecked")
	public Map<String, Object> decodeMsg(String merchantNum, String businessContext) throws PlatformException {
		String businessContext_dec = decodeMsgToString(merchantNum, businessContext);
		if (businessContext_dec != null && businessContext_dec.length() > 0) {
			return JSON.parseObject(businessContext_dec, Map.class);
		} else {
			return new HashMap<String, Object>();
		}
	}

	public String decodeMsgToString(String merchantNum, Map<String, String> responseMap) throws PlatformException {
		if (responseMap == null) {
			return null;
		} else {
			String businessContext = (String) responseMap.get(Constants.businessContext);
			return decodeMsgToString(merchantNum, businessContext);
		}
	}

	@SuppressWarnings("unchecked")
	public String decodeMsgToString(String merchantNum, String businessContext) throws PlatformException {
		if (UnpsUtils.isBlank(businessContext)) {
			return null;
		}
		logger.info("businessContext:" + businessContext);
		// 1.base64转密文
		businessContext = businessContext.replace("\\n", "");
		String cipherTxt = new String(Base64.decode(businessContext.getBytes()));
		// 2.解密
		String signedTxt = null;
		try {
			signedTxt = SM2Utils.decrypt(merchantNum, cipherTxt);
		} catch (UnsupportedEncodingException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_006, e.getMessage());
		} catch (PKIException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_006, e.getMessage());
		}
		// 3.验签
		Map<String, Object> paraMap = JSON.parseObject(signedTxt, Map.class);
		String sign = (String) paraMap.get(Constants.sign);
		String body = (String) paraMap.get(Constants.body);
		logger.info("sign:" + sign);
		logger.info("body:" + body);
		boolean signOK = false;
		try {
			signOK = SM2Utils.verifyRaw(merchantNum, body, sign);
		} catch (UnsupportedEncodingException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_007, e.getMessage());
		} catch (PKIException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_007, e.getMessage());
		}
		if (!signOK) {
			throw new PlatformException(ErrorCode.UNPS_CORE_007, ErrorCode.getErrorMsg(ErrorCode.UNPS_CORE_007));
		}
		return body;
	}

	/**
	 * 加密
	 * 
	 * @throws PlatformException
	 */
	public Map<String, String> encodeMsg(String merchantNum, Map<String, String> busiMap) throws PlatformException {
		String busiMapJson = JSON.toJSONString(busiMap);
		return encodeMsg(merchantNum, busiMapJson);
	}

	@Override
	public Map<String, String> encodeMsg(String merchantNum, String busiMapJson) throws PlatformException {
		Map<String, String> businessContextMap = new HashMap<String, String>();
		businessContextMap.put(Constants.businessContext, encodeMsgToString(merchantNum, busiMapJson));
		return businessContextMap;
	}

	/**
	 * 加密
	 * 
	 * @throws PlatformException
	 */
	public String encodeMsgToString(String merchantNum, Map<String, String> busiMap) throws PlatformException {
		String busiMapJson = JSON.toJSONString(busiMap);
		return encodeMsgToString(merchantNum, busiMapJson);
	}

	@Override
	public String encodeMsgToString(String merchantNum, String busiMapJson) throws PlatformException {
		// 1. 先做签名
		String body = busiMapJson;
		String sign = null;
		try {
			sign = SM2Utils.signRaw(merchantNum, body);
		} catch (UnsupportedEncodingException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_004, e.getMessage());
		} catch (PKIException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_004, e.getMessage());
		}

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(Constants.body, body);
		paramMap.put(Constants.sign, sign);
		logger.info("sign:" + sign);
		logger.info("body:" + body);

		// 2. 再做加密
		String plainTxtBeforeEnc = JSON.toJSONString(paramMap); // 待加密字符串
		String cipherTxt = null;
		String base64 = "";
		try {
			cipherTxt = SM2Utils.encrypt(merchantNum, plainTxtBeforeEnc);
			base64 = new String(Base64.encode(cipherTxt.getBytes()), "utf-8");
		} catch (UnsupportedEncodingException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_005, e.getMessage());
		} catch (PKIException e) {
			throw new PlatformException(ErrorCode.UNPS_CORE_005, e.getMessage());
		}
		base64 = base64.replaceAll("\\n", "");
		logger.info("businessContext:" + base64);

		return base64;
	}
}
